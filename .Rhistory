sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth) +
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3", y = "Density") +
scale_color_manual(values = c("red", "green"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
golub_df <- data.frame(ccnd3 = golub["CCND3"], ALL = golub["ALL"])
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth) +
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3", y = "Density") +
scale_color_manual(values = c("red", "green"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
anyNA(golub$CCND3)
anyNA(golub["CCND3"])
golub$CCND3[is.na(golub$CCND3)] <- mean(golub$CCND3, na.rm = TRUE)
golub$CCND3[is.na(golub["CCND3"])] <- mean(golub["CCND3"], na.rm = TRUE)
golub["CCND3"][is.na(golub["CCND3"])] <- mean(golub["CCND3"], na.rm = TRUE)
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
golub_df <- data.frame(ccnd3 = golub["CCND3"], ALL = golub["ALL"])
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
# Load the data
data("Golub", package = "golubEsets")
ccnd3 <- exprs(Golub)[997, ]  # Extract the ccnd3 data
# Split the data into ALL and AML groups
ALL <- ccnd3[grep("ALL", names(ccnd3))]
AML <- ccnd3[grep("AML", names(ccnd3))]
# Calculate density curves
d_ALL <- density(ALL, bw = input$bandwidth)
d_AML <- density(AML, bw = input$bandwidth)
# Create the plot
plot(d_ALL, main = "Density Plot of ccnd3", xlab = "Expression", col = "red")
lines(d_AML, col = "green")
# Add legend
legend("topright", legend = c("ALL", "AML"), text.col = c("red", "green"))
})
# Define the slider input
output$slider <- renderUI({
sliderInput("bandwidth", "Bandwidth", min = 0.05, max = 0.2, value = 0.1)
})
}
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
golub_df <- data.frame(ccnd3 = golub$CCND3, ALL = golub$ALL)
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth) +
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3", y = "Density") +
scale_color_manual(values = c("red", "green"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("golubEsets")
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
golub_df <- data.frame(ccnd3 = golub$CCND3, ALL = golub$ALL)
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth) +
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3", y = "Density") +
scale_color_manual(values = c("red", "green"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth, na.rm = TRUE)
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth) +
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3", y = "Density") +
scale_color_manual(values = c("red", "green"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
golub_df <- data.frame(ccnd3 = golub$CCND3, ALL = golub$ALL)
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth, na.rm = TRUE) +  # Added `na.rm = TRUE`
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3", y = "Density") +
scale_color_manual(values = c("red", "green"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
golub_df <- data.frame(ccnd3 = golub$CCND3, ALL = golub$ALL)
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth, na.rm = TRUE) +  # Added `na.rm = TRUE`
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3", y = "Density") +
scale_color_manual(values = c("red", "green"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
golub_df <- data.frame(ccnd3 = golub$CCND3, ALL = golub$ALL)
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth, na.rm = TRUE) +  # Added `na.rm = TRUE`
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3", y = "Density") +
scale_color_manual(values = c("red", "green"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Load Golub ccnd3 data
data(golub)
# Convert Golub data to data frame
golub_df <- data.frame(ccnd3 = golub$CCND3, ALL = golub$ALL)
# Add log-transformed ccnd3 column
golub_df$ccnd3_log <- log(golub_df$ccnd3 + 1)  # Add 1 to avoid log(0)
# Define UI for application
ui <- fluidPage(
titlePanel("Golub ccnd3 Density Plot"),
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth", "Bandwidth:", min = 0.05, max = 0.2, value = 0.1, step = 0.01)
),
mainPanel(
plotOutput("densityPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$densityPlot <- renderPlot({
# Plot density curves
ggplot(golub_df, aes(x = ccnd3_log, group = factor(ALL), color = factor(ALL))) +
geom_density(bw = input$bandwidth, na.rm = TRUE, alpha = 0.5) +
labs(title = "Density Plot of Golub ccnd3 Data", x = "ccnd3 (log-transformed)", y = "Density") +
scale_color_manual(values = c("blue", "orange"), name = "Legend", labels = c("ALL", "AML")) +
theme_minimal() +
theme(legend.position = "top")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, output) {
# Convert golub gene expression matrix to a data frame
golub_df <- as.data.frame(golub)
output$distPlot <- renderPlot({
bandwidth <- input$bandwidth
gol.fac <- factor(golub.cl,levels=0:1,labels =c("ALL","AML"))
all_data <- golub_df[1042, gol.fac=="ALL"]
aml_data <- golub_df[1042, gol.fac=="AML"]
# Calculate the density curves
all_density <- density(all_data, bw = input$bandwidth, kernel = "gaussian")
aml_density <- density(aml_data, bw = input$bandwidth, kernel = "gaussian")
# Plot the density curves
plot(all_density, col = "green", main = "Golub Data", xlab = "", xlim = range(c(all_density$x, aml_density$x)), ylim = c(0, 1.2), type = "n")
lines(all_density, col = "green")
lines(aml_density, col = "red")
# Add a legend
legend("topright", legend = c("ALL", "AML"), col = c("green", "red"), lty = 1, cex = 0.8)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Convert golub gene expression matrix to a data frame
golub_df <- as.data.frame(golub[1042,])
output$distPlot <- renderPlot({
bandwidth <- input$bandwidth
gol.fac <- factor(golub.cl,levels=0:1,labels =c("ALL","AML"))
all_data <- golub_df[1042, gol.fac=="ALL"]
aml_data <- golub_df[1042, gol.fac=="AML"]
# Calculate the density curves
all_density <- density(all_data, bw = input$bandwidth, kernel = "gaussian")
aml_density <- density(aml_data, bw = input$bandwidth, kernel = "gaussian")
# Plot the density curves
plot(all_density, col = "green", main = "Golub Data", xlab = "", xlim = range(c(all_density$x, aml_density$x)), ylim = c(0, 1.2), type = "n")
lines(all_density, col = "green")
lines(aml_density, col = "red")
# Add a legend
legend("topright", legend = c("ALL", "AML"), col = c("green", "red"), lty = 1, cex = 0.8)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Convert golub gene expression matrix to a data frame
data(golub)
golub[1042,]
output$distPlot <- renderPlot({
bandwidth <- input$bandwidth
gol.fac <- factor(golub.cl,levels=0:1,labels =c("ALL","AML"))
all_data <- golub[1042, gol.fac=="ALL"]
aml_data <- golub[1042, gol.fac=="AML"]
# Calculate the density curves
all_density <- density(all_data, bw = input$bandwidth, kernel = "gaussian")
aml_density <- density(aml_data, bw = input$bandwidth, kernel = "gaussian")
# Plot the density curves
plot(all_density, col = "green", main = "Golub Data", xlab = "", xlim = range(c(all_density$x, aml_density$x)), ylim = c(0, 1.2), type = "n")
lines(all_density, col = "green")
lines(aml_density, col = "red")
# Add a legend
legend("topright", legend = c("ALL", "AML"), col = c("green", "red"), lty = 1, cex = 0.8)
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
# Convert golub gene expression matrix to a data frame
data(golub)
golub[1042,]
output$distPlot <- renderPlot({
bandwidth <- input$bandwidth
gol.fac <- factor(golub.cl,levels=0:1,labels =c("ALL","AML"))
all_data <- golub[1042, gol.fac=="ALL"]
aml_data <- golub[1042, gol.fac=="AML"]
# Calculate the density curves
all_density <- density(all_data, bw = input$bandwidth, kernel = "gaussian")
aml_density <- density(aml_data, bw = input$bandwidth, kernel = "gaussian")
# Plot the density curves
plot(all_density, col = "green", main = "Golub Data", xlab = "", xlim = range(c(all_density$x, aml_density$x)), ylim = c(0, 1.2), type = "n")
lines(all_density, col = "green")
lines(aml_density, col = "red")
# Add a legend
legend("topright", legend = c("ALL", "AML"), col = c("green", "red"), lty = 1, cex = 0.8)
})
}
shinyApp(ui = ui, server = server)
library(multtest)
server <- function(input, output) {
# Convert golub gene expression matrix to a data frame
data(golub)
golub[1042,]
output$distPlot <- renderPlot({
bandwidth <- input$bandwidth
gol.fac <- factor(golub.cl,levels=0:1,labels =c("ALL","AML"))
all_data <- golub[1042, gol.fac=="ALL"]
aml_data <- golub[1042, gol.fac=="AML"]
# Calculate the density curves
all_density <- density(all_data, bw = input$bandwidth, kernel = "gaussian")
aml_density <- density(aml_data, bw = input$bandwidth, kernel = "gaussian")
# Plot the density curves
plot(all_density, col = "green", main = "Golub Data", xlab = "", xlim = range(c(all_density$x, aml_density$x)), ylim = c(0, 1.2), type = "n")
lines(all_density, col = "green")
lines(aml_density, col = "red")
# Add a legend
legend("topright", legend = c("ALL", "AML"), col = c("green", "red"), lty = 1, cex = 0.8)
})
}
shinyApp(ui = ui, server = server)
print(golub)
server <- function(input, output) {
# Convert golub gene expression matrix to a data frame
data(golub)
golub[1042,]
output$distPlot <- renderPlot({
bandwidth <- input$bandwidth
gol.fac <- factor(golub.cl,levels=0:1,labels =c("ALL","AML"))
all_data <- golub[1042, gol.fac=="ALL"]
aml_data <- golub[1042, gol.fac=="AML"]
# Calculate the density curves
all_density <- density(all_data, bw = input$bandwidth)
aml_density <- density(aml_data, bw = input$bandwidth)
# Plot the density curves
plot(all_density, col = "green", main = "Golub Data", xlab ="")
lines(all_density, col = "green")
lines(aml_density, col = "red")
# Add a legend
legend("topright", legend = c("ALL", "AML"), col = c("green", "red"), lty = 1, cex = 0.8)
})
}
shinyApp(ui = ui, server = server)
library(ggplot2)
library(dplyr)
library(multtest);
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Golub ccnd3 Density Plot"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bandwidth",
"Bandwidth:",
min = 0.05,
max = 0.2,
value = 0.1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
data(golub)
golub[1042,]
#data(golub)
output$distPlot <- renderPlot({
bandwidth <- input$bandwidth
gol.fac <- factor(golub.cl, levels=0:1, labels = c("ALL","AML"))
density_all <- density(golub[1042, gol.fac=="ALL"], bw = input$bandwidth)
density_aml <- density(golub[1042, gol.fac=="AML"], bw = input$bandwidth)
# Plot density curves
plot(density_all, col = "red", main = "Golub ccnd3 Data Density Plot", xlab = "Expression Level", ylab = "Density",xlim = c(-0.5, 2.5), ylim = c(0.0, 1.2))
lines(density_aml, col = "green")
# Add legend
legend("topright", legend = c("ALL", "AML"), fill = c("red", "green"), text.col = c("red", "green"))
})
}
shinyApp(ui = ui, server = server)
getwd
getwd()
setwd('C:/Users/HP/OneDrive - Manipal Academy of Higher Education/Desktop/Certifications/DEA_edgeR')
x1 <- 1
x2 = 1
ls()
rm(x2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
BiocManager::install('biomaRt')
BiocManager::install('ComplexHeatmap')
install.packages('circlize')
install.packages('openxlsx')
install.packages('ggplot2')
install.packages('dplyr')
install.packages('FactoMineR')
